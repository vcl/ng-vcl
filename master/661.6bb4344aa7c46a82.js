"use strict";(self.webpackChunkng_vcl_demo=self.webpackChunkng_vcl_demo||[]).push([[661],{2809:(c,t,n)=>{n.r(t),n.d(t,{default:()=>m});const m="<pre>xs: {{ xs$ | async }}</pre>\n<pre>sm: {{ sm$ | async }}</pre>\n<pre>md: {{ md$ | async }}</pre>\n<pre>lg: {{ lg$ | async }}</pre>\n<pre>xl: {{ xl$ | async }}</pre>\n<pre>xs_sm: {{ xs_sm$ | async }}</pre>\n"},6661:(c,t,n)=>{n.r(t),n.d(t,{BreakpointsDemoModule:()=>x,demo:()=>b});var m=n(8132),v=n(9042),r=n(6107),h=n(6354),d=n(2200),e=n(3664),k=n(9968);const a=(0,h.T)(o=>o.matches);let $=(()=>{var o;class s{constructor(l){this.breakpointObserver=l}ngOnInit(){this.xs$=this.breakpointObserver.observe(r.mTY.xs).pipe(a),this.sm$=this.breakpointObserver.observe(r.mTY.sm).pipe(a),this.md$=this.breakpointObserver.observe(r.mTY.md).pipe(a),this.lg$=this.breakpointObserver.observe(r.mTY.lg).pipe(a),this.xl$=this.breakpointObserver.observe(r.mTY.xl).pipe(a),this.xs_sm$=this.breakpointObserver.observe([r.mTY.xs,r.mTY.sm]).pipe(a)}static#e=o=()=>(this.\u0275fac=function(p){return new(p||s)(e.rXU(k.Q))},this.\u0275cmp=e.VBU({type:s,selectors:[["ng-component"]],decls:18,vars:18,template:function(p,i){1&p&&(e.rj2(0,"pre"),e.EFF(1),e.nI1(2,"async"),e.eux(),e.rj2(3,"pre"),e.EFF(4),e.nI1(5,"async"),e.eux(),e.rj2(6,"pre"),e.EFF(7),e.nI1(8,"async"),e.eux(),e.rj2(9,"pre"),e.EFF(10),e.nI1(11,"async"),e.eux(),e.rj2(12,"pre"),e.EFF(13),e.nI1(14,"async"),e.eux(),e.rj2(15,"pre"),e.EFF(16),e.nI1(17,"async"),e.eux()),2&p&&(e.R7$(),e.SpI("xs: ",e.bMT(2,6,i.xs$)),e.R7$(3),e.SpI("sm: ",e.bMT(5,8,i.sm$)),e.R7$(3),e.SpI("md: ",e.bMT(8,10,i.md$)),e.R7$(3),e.SpI("lg: ",e.bMT(11,12,i.lg$)),e.R7$(3),e.SpI("xl: ",e.bMT(14,14,i.xl$)),e.R7$(3),e.SpI("xs_sm: ",e.bMT(17,16,i.xs_sm$)))},dependencies:[d.Jj],encapsulation:2}))}return o(),s})();const u="# Breakpoints\n\nVCL Breakpoint queries to be used with `@angular/cdk`'s BreakpointObserver or `window.matchMedia()`\n\n### Usage\n\n```ts\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nexport class MyComponent implements OnInit {\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n  ) {}\n\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs_sm$ = this.breakpointObserver.observe([VCLBreakpoints.xs, VCLBreakpoints.sm]).pipe(\n      map(state => state.matches)\n    );\n  }\n}\n\n```\n";var O=n(2615);function b(){return{label:"Breakpoints",tabs:{Demo:$,"README.md":{type:"md",content:u},"demo.component.html":{type:"html",content:n(2809)},"demo.component.ts":{type:"ts",content:n(8165)}}}}let x=(()=>{var o;class s{static#e=o=()=>(this.\u0275fac=function(p){return new(p||s)},this.\u0275mod=e.$C({type:s}),this.\u0275inj=O.G2t({imports:[m.iI.forChild([{path:"",component:v.D,data:{demo:b}}])]}))}return o(),s})()},8165:(c,t,n)=>{n.r(t),n.d(t,{default:()=>m});const m="import { Component } from '@angular/core';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { map } from 'rxjs/operators';\nimport { AsyncPipe } from '@angular/common';\n\nconst pickMatches = map((state: BreakpointState) => state.matches);\n\n@Component({\n  templateUrl: 'demo.component.html',\n  imports: [AsyncPipe],\n})\nexport class BreakpointsDemoComponent {\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n  xs$: Observable<boolean>;\n  sm$: Observable<boolean>;\n  md$: Observable<boolean>;\n  lg$: Observable<boolean>;\n  xl$: Observable<boolean>;\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs$ = this.breakpointObserver\n      .observe(VCLBreakpoints.xs)\n      .pipe(pickMatches);\n    this.sm$ = this.breakpointObserver\n      .observe(VCLBreakpoints.sm)\n      .pipe(pickMatches);\n    this.md$ = this.breakpointObserver\n      .observe(VCLBreakpoints.md)\n      .pipe(pickMatches);\n    this.lg$ = this.breakpointObserver\n      .observe(VCLBreakpoints.lg)\n      .pipe(pickMatches);\n    this.xl$ = this.breakpointObserver\n      .observe(VCLBreakpoints.xl)\n      .pipe(pickMatches);\n    this.xs_sm$ = this.breakpointObserver\n      .observe([VCLBreakpoints.xs, VCLBreakpoints.sm])\n      .pipe(pickMatches);\n  }\n}\n"}}]);