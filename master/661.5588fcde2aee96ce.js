"use strict";(self.webpackChunkng_vcl_demo=self.webpackChunkng_vcl_demo||[]).push([[661],{6661:(l,t,n)=>{n.r(t),n.d(t,{BreakpointsDemoModule:()=>O,demo:()=>c});var r=n(177),v=n(164),b=n(9042),o=n(3323),h=n(6354),e=n(4438),k=n(8352);const a=(0,h.T)(s=>s.matches);let d=(()=>{class s{constructor(m){this.breakpointObserver=m}ngOnInit(){this.xs$=this.breakpointObserver.observe(o.mTY.xs).pipe(a),this.sm$=this.breakpointObserver.observe(o.mTY.sm).pipe(a),this.md$=this.breakpointObserver.observe(o.mTY.md).pipe(a),this.lg$=this.breakpointObserver.observe(o.mTY.lg).pipe(a),this.xl$=this.breakpointObserver.observe(o.mTY.xl).pipe(a),this.xs_sm$=this.breakpointObserver.observe([o.mTY.xs,o.mTY.sm]).pipe(a)}static{this.\u0275fac=function(p){return new(p||s)(e.rXU(k.QP))}}static{this.\u0275cmp=e.VBU({type:s,selectors:[["ng-component"]],standalone:!1,decls:18,vars:18,template:function(p,i){1&p&&(e.j41(0,"pre"),e.EFF(1),e.nI1(2,"async"),e.k0s(),e.j41(3,"pre"),e.EFF(4),e.nI1(5,"async"),e.k0s(),e.j41(6,"pre"),e.EFF(7),e.nI1(8,"async"),e.k0s(),e.j41(9,"pre"),e.EFF(10),e.nI1(11,"async"),e.k0s(),e.j41(12,"pre"),e.EFF(13),e.nI1(14,"async"),e.k0s(),e.j41(15,"pre"),e.EFF(16),e.nI1(17,"async"),e.k0s()),2&p&&(e.R7$(),e.SpI("xs: ",e.bMT(2,6,i.xs$),""),e.R7$(3),e.SpI("sm: ",e.bMT(5,8,i.sm$),""),e.R7$(3),e.SpI("md: ",e.bMT(8,10,i.md$),""),e.R7$(3),e.SpI("lg: ",e.bMT(11,12,i.lg$),""),e.R7$(3),e.SpI("xl: ",e.bMT(14,14,i.xl$),""),e.R7$(3),e.SpI("xs_sm: ",e.bMT(17,16,i.xs_sm$),""))},dependencies:[r.Jj],encapsulation:2})}}return s})();const $="# Breakpoints\n\nVCL Breakpoint queries to be used with `@angular/cdk`'s BreakpointObserver or `window.matchMedia()`\n\n### Usage\n\n```ts\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nexport class MyComponent implements OnInit {\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n  ) {}\n\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs_sm$ = this.breakpointObserver.observe([VCLBreakpoints.xs, VCLBreakpoints.sm]).pipe(\n      map(state => state.matches)\n    );\n  }\n}\n\n```\n";function c(){return{label:"Breakpoints",tabs:{Demo:d,"README.md":{type:"md",content:$},"demo.component.html":{type:"html",content:n(2809)},"demo.component.ts":{type:"ts",content:n(8165)}}}}let O=(()=>{class s{static{this.\u0275fac=function(p){return new(p||s)}}static{this.\u0275mod=e.$C({type:s})}static{this.\u0275inj=e.G2t({imports:[r.MD,b.q,v.iI.forChild([{path:"",component:b.D,data:{demo:c}}])]})}}return s})()},2809:(l,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r="<pre>xs: {{ xs$ | async }}</pre>\n<pre>sm: {{ sm$ | async }}</pre>\n<pre>md: {{ md$ | async }}</pre>\n<pre>lg: {{ lg$ | async }}</pre>\n<pre>xl: {{ xl$ | async }}</pre>\n<pre>xs_sm: {{ xs_sm$ | async }}</pre>\n"},8165:(l,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r="import { Component } from '@angular/core';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { map } from 'rxjs/operators';\n\nconst pickMatches = map((state: BreakpointState) => state.matches);\n\n@Component({\n    templateUrl: 'demo.component.html',\n    standalone: false\n})\nexport class BreakpointsDemoComponent {\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n  xs$: Observable<boolean>;\n  sm$: Observable<boolean>;\n  md$: Observable<boolean>;\n  lg$: Observable<boolean>;\n  xl$: Observable<boolean>;\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs$ = this.breakpointObserver\n      .observe(VCLBreakpoints.xs)\n      .pipe(pickMatches);\n    this.sm$ = this.breakpointObserver\n      .observe(VCLBreakpoints.sm)\n      .pipe(pickMatches);\n    this.md$ = this.breakpointObserver\n      .observe(VCLBreakpoints.md)\n      .pipe(pickMatches);\n    this.lg$ = this.breakpointObserver\n      .observe(VCLBreakpoints.lg)\n      .pipe(pickMatches);\n    this.xl$ = this.breakpointObserver\n      .observe(VCLBreakpoints.xl)\n      .pipe(pickMatches);\n    this.xs_sm$ = this.breakpointObserver\n      .observe([VCLBreakpoints.xs, VCLBreakpoints.sm])\n      .pipe(pickMatches);\n  }\n}\n"}}]);