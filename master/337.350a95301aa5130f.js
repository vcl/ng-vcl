"use strict";(self.webpackChunkng_vcl_demo=self.webpackChunkng_vcl_demo||[]).push([[337],{1622:(c,i,n)=>{n.r(i),n.d(i,{default:()=>e});const e='\n<vcl-notification> \n  An inline message\n</vcl-notification>\n\n<vcl-notification type="success"> \n  <vcl-notification-title>Success</vcl-notification-title>\n  An inline success message\n</vcl-notification>\n\n'},4610:(c,i,n)=>{n.r(i),n.d(i,{default:()=>e});const e="import { VCLNotificationModule } from '@vcl/ng-vcl';\nimport { Component } from '@angular/core';\n\n@Component({\n  templateUrl: 'demo.component.html',\n  imports: [VCLNotificationModule],\n})\nexport class NotificationDemoComponent {}\n"},7337:(c,i,n)=>{n.r(i),n.d(i,{NotificationDemoModule:()=>v,demo:()=>a});var e=n(8254),r=n(9042),f=n(8652),t=n(7241),l=n(9088);let u=(()=>{class o{static#n=this.\u0275fac=function(s){return new(s||o)};static#t=this.\u0275cmp=t.VBU({type:o,selectors:[["ng-component"]],decls:6,vars:0,consts:[["type","success"]],template:function(s,g){1&s&&(t.j41(0,"vcl-notification"),t.EFF(1," An inline message\n"),t.k0s(),t.j41(2,"vcl-notification",0)(3,"vcl-notification-title"),t.EFF(4,"Success"),t.k0s(),t.EFF(5," An inline success message\n"),t.k0s())},dependencies:[f.Bov,l.zP,l.xy],encapsulation:2})}return o})();const p="# vcl-notifications\n\nNotification messages for events with growl-style support\n\n## Usage\n\n```js\nimport { VCLNotifierModule, VCLLayerModule } from '@vcl/ng-vcl';\n\n@NgModule({\n  imports: [ \n    VCLNotifierModule,\n  ],\n  ...\n})\nexport class AppComponent {}\n```\n\nInline\n\n```html\n<vcl-notification type=\"success\"> \n  <span vclNotificationHeader>Success</span>\n  An inline success message\n  <span vclNotificationFooter>Footer</span>\n</vcl-notification>\n```\n\nGrowl-style\n\n\n```ts\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private notifier: NotifierService) {}\n\n  info() {\n    this.notifier.queue({\n      content: 'A message'\n    });\n  }\n  info() {\n    this.notifier.info({\n      content: 'An info message'\n    });\n  }\n  success() {\n    this.notifier.success({\n      content: 'A success message',\n      position: NotifierPosition.BottomRight\n    });\n  }\n  warning() {\n    this.notifier.warning({\n      content: 'A warning',\n      showCloseButton: true,\n      timeout: 10000\n    });\n  }\n  error() {\n    this.notifier.error({\n      content: 'An error message',\n      timeout: false,\n      icon: 'vcl:error',\n      position: NotifierPosition.TopLeft,\n      class: 'my-error-message'\n    });\n  }\n}\n```\n\n```html\n<ng-template [vclNotification[]=\"{}\" #n=\"vclNotification\">\n  <p>Hello</p>\n</ng-template>\n<button (click)=\"n.open()\">Show notification</button>\n\n```\n\n\n### API\n\n```ts\nexport enum NotifierType {\n  None,\n  Info,\n  Success,\n  Warning,\n  Error\n}\n\nexport enum NotifierPosition {\n  TopRight,\n  Top,\n  TopLeft,\n  BottomRight,\n  Bottom,\n  BottomLeft,\n  Center\n}\n\nexport interface NotifierOptions {\n  content?: string;\n  type?: NotifierType;\n  icon: string | false;\n  showCloseButton?: boolean;\n  position?: NotifierPosition;\n  timeout?: number | boolean;\n  class?: string;\n  context?: any;\n}\n```\n";var d=n(8564);function a(){return{label:"Notification",tabs:{Demo:u,"README.md":{type:"md",content:p},"demo.component.html":{type:"html",content:n(1622)},"demo.component.ts":{type:"ts",content:n(4610)}}}}let v=(()=>{class o{static#n=this.\u0275fac=function(s){return new(s||o)};static#t=this.\u0275mod=t.$C({type:o});static#o=this.\u0275inj=d.G2t({imports:[e.iI.forChild([{path:"",component:r.D,data:{demo:a}}])]})}return o})()}}]);