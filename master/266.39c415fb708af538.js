"use strict";(self.webpackChunkng_vcl_demo=self.webpackChunkng_vcl_demo||[]).push([[266],{2266:(c,s,n)=>{n.r(s),n.d(s,{BreakpointsDemoModule:()=>m,demo:()=>v});var o=n(6895),h=n(4629),b=n(9155),t=n(7074),d=n(4004),e=n(4650),k=n(1235);const r=(0,d.U)(O=>O.matches);class i{constructor(l){this.breakpointObserver=l}ngOnInit(){this.xs$=this.breakpointObserver.observe(t.uCr.xs).pipe(r),this.sm$=this.breakpointObserver.observe(t.uCr.sm).pipe(r),this.md$=this.breakpointObserver.observe(t.uCr.md).pipe(r),this.lg$=this.breakpointObserver.observe(t.uCr.lg).pipe(r),this.xl$=this.breakpointObserver.observe(t.uCr.xl).pipe(r),this.xs_sm$=this.breakpointObserver.observe([t.uCr.xs,t.uCr.sm]).pipe(r)}static#e=this.\u0275fac=function(a){return new(a||i)(e.Y36(k.Yg))};static#n=this.\u0275cmp=e.Xpm({type:i,selectors:[["ng-component"]],decls:18,vars:18,template:function(a,p){1&a&&(e.TgZ(0,"pre"),e._uU(1),e.ALo(2,"async"),e.qZA(),e.TgZ(3,"pre"),e._uU(4),e.ALo(5,"async"),e.qZA(),e.TgZ(6,"pre"),e._uU(7),e.ALo(8,"async"),e.qZA(),e.TgZ(9,"pre"),e._uU(10),e.ALo(11,"async"),e.qZA(),e.TgZ(12,"pre"),e._uU(13),e.ALo(14,"async"),e.qZA(),e.TgZ(15,"pre"),e._uU(16),e.ALo(17,"async"),e.qZA()),2&a&&(e.xp6(1),e.hij("xs: ",e.lcZ(2,6,p.xs$),""),e.xp6(3),e.hij("sm: ",e.lcZ(5,8,p.sm$),""),e.xp6(3),e.hij("md: ",e.lcZ(8,10,p.md$),""),e.xp6(3),e.hij("lg: ",e.lcZ(11,12,p.lg$),""),e.xp6(3),e.hij("xl: ",e.lcZ(14,14,p.xl$),""),e.xp6(3),e.hij("xs_sm: ",e.lcZ(17,16,p.xs_sm$),""))},dependencies:[o.Ov],encapsulation:2})}function v(){return{label:"Breakpoints",tabs:{Demo:i,"README.md":{type:"md",content:"# Breakpoints\n\nVCL Breakpoint queries to be used with `@angular/cdk`'s BreakpointObserver or `window.matchMedia()`\n\n### Usage\n\n```ts\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { BreakpointObserver } from '@angular/cdk/layout';\n\nexport class MyComponent implements OnInit {\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n  ) {}\n\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs_sm$ = this.breakpointObserver.observe([VCLBreakpoints.xs, VCLBreakpoints.sm]).pipe(\n      map(state => state.matches)\n    );\n  }\n}\n\n```\n"},"demo.component.html":{type:"html",content:n(9088)},"demo.component.ts":{type:"ts",content:n(1917)}}}}class m{static#e=this.\u0275fac=function(a){return new(a||m)};static#n=this.\u0275mod=e.oAB({type:m});static#s=this.\u0275inj=e.cJS({imports:[o.ez,b.l,h.Bz.forChild([{path:"",component:b.z,data:{demo:v}}])]})}},9088:(c,s,n)=>{n.r(s),n.d(s,{default:()=>o});const o="<pre>xs: {{ xs$ | async }}</pre>\n<pre>sm: {{ sm$ | async }}</pre>\n<pre>md: {{ md$ | async }}</pre>\n<pre>lg: {{ lg$ | async }}</pre>\n<pre>xl: {{ xl$ | async }}</pre>\n<pre>xs_sm: {{ xs_sm$ | async }}</pre>\n"},1917:(c,s,n)=>{n.r(s),n.d(s,{default:()=>o});const o="import { Component } from '@angular/core';\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { VCLBreakpoints } from '@vcl/ng-vcl';\nimport { map } from 'rxjs/operators';\n\nconst pickMatches = map((state: BreakpointState) => state.matches);\n\n@Component({\n  templateUrl: 'demo.component.html',\n})\nexport class BreakpointsDemoComponent {\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n  xs$: Observable<boolean>;\n  sm$: Observable<boolean>;\n  md$: Observable<boolean>;\n  lg$: Observable<boolean>;\n  xl$: Observable<boolean>;\n  xs_sm$: Observable<boolean>;\n\n  ngOnInit(): void {\n    this.xs$ = this.breakpointObserver\n      .observe(VCLBreakpoints.xs)\n      .pipe(pickMatches);\n    this.sm$ = this.breakpointObserver\n      .observe(VCLBreakpoints.sm)\n      .pipe(pickMatches);\n    this.md$ = this.breakpointObserver\n      .observe(VCLBreakpoints.md)\n      .pipe(pickMatches);\n    this.lg$ = this.breakpointObserver\n      .observe(VCLBreakpoints.lg)\n      .pipe(pickMatches);\n    this.xl$ = this.breakpointObserver\n      .observe(VCLBreakpoints.xl)\n      .pipe(pickMatches);\n    this.xs_sm$ = this.breakpointObserver\n      .observe([VCLBreakpoints.xs, VCLBreakpoints.sm])\n      .pipe(pickMatches);\n  }\n}\n"}}]);