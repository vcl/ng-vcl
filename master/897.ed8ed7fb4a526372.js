"use strict";(self.webpackChunkng_vcl_demo=self.webpackChunkng_vcl_demo||[]).push([[897],{897:(p,l,e)=>{e.r(l),e.d(l,{AlertDemoModule:()=>I,demo:()=>d});var u=e(6814),g=e(2911),c=e(2916),f=e(2320),y=e(5592),w=e(4829),T=e(8645),v=e(9360),b=e(8251),B=e(4664),D=e(9397),t=e(5879),x=e(5296);function A(s,i){return new y.y(n=>{setTimeout(()=>{("function"==typeof i?i():i)?n.error(s):(n.next(s),n.complete())},1e3)})}let k=(()=>{class s{constructor(n){this.alert=n,this.subscriptions=[]}ngOnDestroy(){this.subscriptions.forEach(n=>n?.unsubscribe())}message(){this.alert.alert("A message")}messageWithTitle(){this.alert.alert("A message",{title:"A title"})}info(){this.alert.info("This is an information",{title:"An information"})}success(){this.alert.success("You are successful",{title:"A success"})}warning(){this.alert.warning("This is a warning",{title:"A warning"})}error(){this.alert.error("This is an error",{title:"An error"})}htmlMessage(){this.alert.alert('Use <i>as much<i> <a href="//www.w3schools.com/html/">HTML</a> as you <b>like</b>',{html:!0})}custom(){this.alert.open({text:"This is a bit customized...",title:"Information",type:c.NK9.Info,showCloseButton:!0,showCancelButton:!0,confirmButtonClass:"suggestive",confirmButtonPrepIcon:"fas:bolt",cancelButtonColor:"orange",customClass:"scale130p"})}question(){this.subscriptions.push(this.alert.open({text:"Do you really want to delete the file?",title:"Delete file?",type:c.NK9.Question,showCloseButton:!0,showCancelButton:!0,cancelButtonLabel:"No",confirmButtonLabel:"Yes"}).subscribe(n=>{"confirm"===n.action?this.alert.success("File deleted"):this.alert.error("Reason: "+n.action,{title:"File not deleted"})}))}async(){this.subscriptions.push(this.alert.open({text:"Determine your user agent?",confirmAction:A(window.navigator.userAgent),showCancelButton:!0}).subscribe(n=>{"confirm"===n.action&&this.alert.info(n.value,{title:"Your user agent"})}))}inputText(){this.subscriptions.push(this.alert.open({text:"What is your name?",input:c.kw5.Text,confirmButtonLabel:"Next",inputValidator:n=>{if("string"!=typeof n||n.length<2)throw new Error("Invalid name!");return!0}}).subscribe(n=>{"confirm"===n.action&&this.alert.info("Hello "+n.value)}))}retry(){let n=0;const r=A((new Date).toLocaleTimeString(),()=>++n<=1).pipe(function C(s){return(0,v.e)((i,n)=>{let o,a,r=!1;const m=()=>{o=i.subscribe((0,b.x)(n,void 0,void 0,h=>{a||(a=new T.x,(0,w.Xf)(s(a)).subscribe((0,b.x)(n,()=>o?m():r=!0))),a&&a.next(h)})),r&&(o.unsubscribe(),o=null,r=!1,m())};m()})}(a=>a.pipe((0,B.w)(m=>this.alert.open({text:"Retry?",type:c.NK9.Warning,showCancelButton:!0,closeOnBackdropClick:!1,closeOnEscape:!1}).pipe((0,D.b)(h=>{if("cancel"===h.action)throw new Error}))))));this.subscriptions.push(this.alert.open({text:"Show current time? (will fail the first time)",showCancelButton:!0,confirmAction:r}).subscribe(a=>{this.alert.info(a.value,{title:"Time"})}))}}return s.\u0275fac=function(n){return new(n||s)(t.Y36(c.c9N))},s.\u0275cmp=t.Xpm({type:s,selectors:[["ng-component"]],decls:25,vars:0,consts:[[1,"wrapper","gutter-2"],["vcl-button","",3,"click"]],template:function(n,o){1&n&&(t.TgZ(0,"div",0)(1,"button",1),t.NdJ("click",function(){return o.message()}),t._uU(2,"A message"),t.qZA(),t.TgZ(3,"button",1),t.NdJ("click",function(){return o.messageWithTitle()}),t._uU(4,"A title and a message"),t.qZA(),t.TgZ(5,"button",1),t.NdJ("click",function(){return o.info()}),t._uU(6,"An info"),t.qZA(),t.TgZ(7,"button",1),t.NdJ("click",function(){return o.success()}),t._uU(8,"A success"),t.qZA(),t.TgZ(9,"button",1),t.NdJ("click",function(){return o.warning()}),t._uU(10,"A warning"),t.qZA(),t.TgZ(11,"button",1),t.NdJ("click",function(){return o.error()}),t._uU(12,"An error"),t.qZA(),t.TgZ(13,"button",1),t.NdJ("click",function(){return o.htmlMessage()}),t._uU(14,"A html message"),t.qZA(),t.TgZ(15,"button",1),t.NdJ("click",function(){return o.custom()}),t._uU(16,"A custom info message"),t.qZA(),t.TgZ(17,"button",1),t.NdJ("click",function(){return o.question()}),t._uU(18,"A question"),t.qZA(),t.TgZ(19,"button",1),t.NdJ("click",function(){return o.async()}),t._uU(20,"An async request"),t.qZA(),t.TgZ(21,"button",1),t.NdJ("click",function(){return o.retry()}),t._uU(22,"Retrying an async request"),t.qZA(),t.TgZ(23,"button",1),t.NdJ("click",function(){return o.inputText()}),t._uU(24,"A text input"),t.qZA()())},dependencies:[x.r],styles:[".wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column;width:-moz-fit-content;width:fit-content}"]}),s})();const E="# vcl-alert\n\nBetter javascript alert()\n\n## Usage\n\n```ts\n@Component({ ... })\nexport class MyComponent {\n\n  constructor(private alert: AlertService) {}\n\n  message() {\n    this.alert.success('Done!');\n  }\n\n  deleteFile() {\n    this.alert.open({\n      text: 'Do you really want to delete the file?',\n      title: 'Delete file',\n      type: AlertType.Question,\n      showCloseButton: true,\n      showCancelButton: true,\n      cancelButtonLabel: 'No',\n      confirmButtonLabel: 'Yes'\n    }).subscribe((result) => {\n      if (result.action === 'confirm') {\n        this.alert.success('File deleted');\n      } else {\n        this.alert.error('File not deleted');\n      }\n    });\n  }\n\n}\n```\n\n### Examples\n\n```ts\n// Simple message\nthis.alert.success('A message');\n\n// Message with a title\nthis.alert.info('A message', {\n  title: 'A title'\n});\n\n// HTML Message\nthis.alert.open({\n  text: `Use <i>as much<i> <a href=\"//www.w3schools.com/html/\">HTML</a> as you <b>like</b>`.\n  html: true\n});\n\n// Customized info message\nthis.alert.open({\n  title: 'Information',\n  text: 'This is a bit customized...',\n  type: AlertType.Info,\n  showCloseButton: true,\n  showCancelButton: true,\n  confirmButtonClass: 'vclSuggestive',\n  confirmButtonPrepIcon: 'fas:bolt',\n  cancelButtonColor: 'orange',\n  customClass: 'vclScale130p',\n});\n\n// Confirmation\nthis.alert.open({\n  title: 'Delete file',\n  text: 'Do you really want to delete the file?',\n  type: AlertType.Question,\n  showCloseButton: true,\n  showCancelButton: true,\n  cancelButtonLabel: 'No',\n  confirmButtonLabel: 'Yes'\n}).subscribe((result) => {\n  if (result.action === 'confirm') {\n    this.alert.success('File deleted');\n  } else {\n    this.alert.error('File not deleted');\n  }\n});\n\n// Handling async data\nthis.alert.open({\n  text: 'Fetch data?',\n  confirmAction: this.http.get('/foo/data'),\n  showCancelButton: true\n}).subscribe(result => {\n  if (result.action === 'confirm') {\n    this.alert.info(result.value, { title: 'Your foo data' });\n  } else if (result.action === 'error') {\n    this.alert.error(err, { title: 'Could not fetch data' });\n  }\n});\n\n// With an input element\nthis.alert.open({\n  text: 'What is your name?',\n  input: AlertInput.Text,\n  confirmButtonLabel: 'Next',\n  inputValidator: (value) => {\n    if (typeof value !== 'string' || value.length < 2) {\n      throw 'This is not your name!';\n    }\n    return true;\n  }\n}).subscribe(result => {\n  this.alert.info('Hello ' + result.value);\n});\n```\n\n### Some helper methods\n\n```ts\nalert(text: string, opts?: AlertOptions); // Just the message\ninfo(text: string, opts?: AlertOptions); // Message with AlertType.Info\nsuccess(text: string, opts?: AlertOptions); // Message with AlertType.Success\nwarning(text: string, opts?: AlertOptions); // Message with AlertType.Warning\nerror(text: string, opts?: AlertOptions); // Message with AlertType.Error\nquestion(text: string, opts?: AlertOptions); // Message with AlertType.Question and showCancelButton=true\n```\n\n### API\n\n#### Alert Attributes\n\nAll attributes are optional\n\n| Name                      | Type       | Default      | Description                                                                                        |\n| ------------------------- | ---------- | ------------ | -------------------------------------------------------------------------------------------------- |\n| `text`                    | string     |              | The main message                                                                                   |\n| `title`                   | string     |              | A title                                                                                            |\n| `html`                    | boolean    | false        | Treats the main message as html when `true`                                                        |\n| `type`                    | AlertType  | None         | The type. Defines color and icon.                                                                  |\n| `modal`                   | boolean    | true         | Allow closing via ESC and offclick if true                                                         |\n| `customClass`             | string     |              | A custom css class for the alert modal                                                             |\n| `showConfirmButton`       | boolean    | true         | Show the confirmation button                                                                       |\n| `showCancelButton`        | boolean    | false        | Show the cancel button                                                                             |\n| `showCloseButton`         | boolean    | false        | Show the close button                                                                              |\n| `confirmButtonLabel`      | string     | 'OK'         | Changes the confirm button label                                                                   |\n| `confirmButtonClass`      | string     | 'emphasized' | Adds a class to the confirm button                                                                 |\n| `confirmButtonPrepIcon`   | string     |              | icon to be prepended to the confirm button label                                                   |\n| `confirmButtonAppIcon`    | string     |              | same as `confirmButtonPrepIcon`, but appended                                                      |\n| `cancelButtonLabel`       | string     | 'Cancel'     | Changes the cancel button label                                                                    |\n| `cancelButtonClass`       | string     | 'danger'     | Adds a class to the cancel button                                                                  |\n| `cancelButtonPrepIcon`    | string     |              | icon to be prepended to the cancel button label                                                    |\n| `cancelButtonAppIcon`     | string     |              | same as `cancelButtonPrepIcon`, but appended                                                       |\n| `cancelButtonThrowsError` | boolean    |              | Throw an error instead of passing a result on cancel                                               |\n| `confirmAction`           | Observable |              | Enables loader and subscribes to observable. Closes alert when the observable completes or errors. |\n| `input`                   | AlertInput | None         | Input element                                                                                      |\n| `inputValue`              | any        |              | Default value for the input                                                                        |\n| `inputPlaceholder`        | string     |              | A placeholder. Shown in the input element when using AlertInput.Text                               |\n| `inputValidator`          | function   |              | Input validator callback                                                                           |\n\n#### Enums\n\n```ts\nexport enum AlertType {\n  None,\n  Question,\n  Info,\n  Success,\n  Warning,\n  Error,\n}\n\nexport enum AlertInput {\n  None,\n  Text,\n}\n```\n";function d(){return{label:"Alert",tabs:{Demo:k,"README.md":{type:"md",content:E},"demo.component.html":{type:"html",content:e(860)},"demo.component.scss":{type:"scss",content:e(4941)},"demo.component.ts":{type:"ts",content:e(5230)}}}}let I=(()=>{class s{}return s.\u0275fac=function(n){return new(n||s)},s.\u0275mod=t.oAB({type:s}),s.\u0275inj=t.cJS({imports:[u.ez,f.l,c.Euc,c.V4c,g.Bz.forChild([{path:"",component:f.z,data:{demo:d}}])]}),s})()},860:(p,l,e)=>{e.r(l),e.d(l,{default:()=>u});const u='<div class="wrapper gutter-2">\n  <button vcl-button (click)="message()">A message</button>\n  <button vcl-button (click)="messageWithTitle()">A title and a message</button>\n  <button vcl-button (click)="info()">An info</button>\n  <button vcl-button (click)="success()">A success</button>\n  <button vcl-button (click)="warning()">A warning</button>\n  <button vcl-button (click)="error()">An error</button>\n  <button vcl-button (click)="htmlMessage()">A html message</button>\n  <button vcl-button (click)="custom()">A custom info message</button>\n  <button vcl-button (click)="question()">A question</button>\n  <button vcl-button (click)="async()">An async request</button>\n  <button vcl-button (click)="retry()">Retrying an async request</button>\n  <button vcl-button (click)="inputText()">A text input</button>\n</div>\n'},5230:(p,l,e)=>{e.r(l),e.d(l,{default:()=>u});const u="import { Component, OnDestroy } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { retryWhen, switchMap, tap } from 'rxjs/operators';\n\nimport { AlertService, AlertType, AlertInput } from '@vcl/ng-vcl';\n\nfunction createAsyncResult(\n  data: any,\n  error?: boolean | (() => any)\n): Observable<any> {\n  return new Observable(observer => {\n    setTimeout(() => {\n      const err = typeof error === 'function' ? error() : !!error;\n\n      if (err) {\n        observer.error(data);\n      } else {\n        observer.next(data);\n        observer.complete();\n      }\n    }, 1000);\n  });\n}\n\n@Component({\n  templateUrl: 'demo.component.html',\n  styleUrls: ['demo.component.scss'],\n})\nexport class AlertDemoComponent implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  constructor(private alert: AlertService) {}\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s?.unsubscribe());\n  }\n\n  message() {\n    this.alert.alert('A message');\n  }\n\n  messageWithTitle() {\n    this.alert.alert('A message', {\n      title: 'A title',\n    });\n  }\n\n  info() {\n    this.alert.info('This is an information', {\n      title: 'An information',\n    });\n  }\n\n  success() {\n    this.alert.success('You are successful', {\n      title: 'A success',\n    });\n  }\n\n  warning() {\n    this.alert.warning('This is a warning', {\n      title: 'A warning',\n    });\n  }\n\n  error() {\n    this.alert.error('This is an error', {\n      title: 'An error',\n    });\n  }\n\n  htmlMessage() {\n    this.alert.alert(\n      `Use <i>as much<i> <a href=\"//www.w3schools.com/html/\">HTML</a> as you <b>like</b>`,\n      {\n        html: true,\n      }\n    );\n  }\n\n  custom() {\n    this.alert.open({\n      text: 'This is a bit customized...',\n      title: 'Information',\n      type: AlertType.Info,\n      showCloseButton: true,\n      showCancelButton: true,\n      confirmButtonClass: 'suggestive',\n      confirmButtonPrepIcon: 'fas:bolt',\n      cancelButtonColor: 'orange',\n      customClass: 'scale130p',\n    });\n  }\n\n  question() {\n    this.subscriptions.push(\n      this.alert\n        .open({\n          text: 'Do you really want to delete the file?',\n          title: 'Delete file?',\n          type: AlertType.Question,\n          showCloseButton: true,\n          showCancelButton: true,\n          cancelButtonLabel: 'No',\n          confirmButtonLabel: 'Yes',\n        })\n        .subscribe(result => {\n          if (result.action === 'confirm') {\n            this.alert.success('File deleted');\n          } else {\n            this.alert.error('Reason: ' + result.action, {\n              title: 'File not deleted',\n            });\n          }\n        })\n    );\n  }\n\n  async() {\n    this.subscriptions.push(\n      this.alert\n        .open({\n          text: 'Determine your user agent?',\n          confirmAction: createAsyncResult(window.navigator.userAgent),\n          showCancelButton: true,\n        })\n        .subscribe(result => {\n          if (result.action === 'confirm') {\n            this.alert.info(result.value, {\n              title: 'Your user agent',\n            });\n          }\n        })\n    );\n  }\n\n  inputText() {\n    this.subscriptions.push(\n      this.alert\n        .open({\n          text: 'What is your name?',\n          input: AlertInput.Text,\n          confirmButtonLabel: 'Next',\n          inputValidator: value => {\n            if (typeof value !== 'string' || value.length < 2) {\n              throw new Error('Invalid name!');\n            }\n            return true;\n          },\n        })\n        .subscribe(result => {\n          if (result.action === 'confirm') {\n            this.alert.info('Hello ' + result.value);\n          }\n        })\n    );\n  }\n\n  retry() {\n    // This fake async request will fail the first time\n    let fails = 0;\n    const fakeAsync = createAsyncResult(\n      new Date().toLocaleTimeString(),\n      () => ++fails <= 1\n    );\n\n    // Add a retry routine using an alert\n    const fakeAsyncWithRetries = fakeAsync.pipe(\n      retryWhen(errors => {\n        return errors.pipe(\n          switchMap(_ => {\n            return this.alert\n              .open({\n                text: 'Retry?',\n                type: AlertType.Warning,\n                showCancelButton: true,\n                closeOnBackdropClick: false,\n                closeOnEscape: false,\n              })\n              .pipe(\n                tap(result => {\n                  if (result.action === 'cancel') {\n                    throw new Error();\n                  }\n                })\n              );\n          })\n        );\n      })\n    );\n\n    this.subscriptions.push(\n      this.alert\n        .open({\n          text: 'Show current time? (will fail the first time)',\n          showCancelButton: true,\n          confirmAction: fakeAsyncWithRetries,\n        })\n        .subscribe(result => {\n          this.alert.info(result.value, { title: 'Time' });\n        })\n    );\n  }\n}\n"},4941:(p,l,e)=>{e.r(l),e.d(l,{default:()=>u});const u=".wrapper {\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n}"}}]);